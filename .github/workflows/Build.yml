name: Build

on:
  workflow_dispatch:
  pull_request:
    branches:
      - 'master'
      - 'release-*'
  push:
    branches: 
      - 'master'
      - 'beta'
      - 'release-*'

jobs:
  build:
    env:
      GIT_REF: ${{ github.ref }}
      GIT_SHA: ${{ github.sha }}
      Configuration: Release
      SolutionFile: dotnet\DotNetStandardClasses.sln
    
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    
    - name: Install .NET Core 3.1
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.x'

    - name: Install .NET Core 5.0
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '5.0.x'

    - name: Install .NET 6
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.x'
        include-prerelease: True
        
    - uses: actions/setup-dotnet@v1
      with:
        source-url: https://nuget.pkg.github.com/genexuslabs/index.json
      env:
        NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

    - name: Calculate environment variables
      run: |     
        $IsPrerelease = !($Env:GIT_REF -match 'release-[0-9]+(?:\.[0-9]+)?$')
        echo "IsPrerelease=$IsPrerelease" >> $env:GITHUB_ENV

        $COMMIT_NUMBER = @($(git rev-list --count origin/master..), $(git rev-list --count HEAD))[$IsPrerelease]

        echo "COMMIT_NUMBER=$COMMIT_NUMBER" >> $env:GITHUB_ENV

    - name: Calculate package version
      env:
        PackageVersionString: ./.github/generatePackageVersion.ps1
      run: |
        $NuGetPackageVersion = & "$Env:PackageVersionString"
        
        Write-Output "Packge version to be used: $NuGetPackageVersion"

        echo "NuGetPackageVersion=$NuGetPackageVersion" >> $env:GITHUB_ENV

    - name: Restore packages
      run: dotnet restore $Env:SolutionFile

    - name: Build
      run: dotnet build $Env:SolutionFile --no-restore --configuration $Env:Configuration
       
    - name: Test
      run: dotnet test $Env:SolutionFile --no-restore --no-build --configuration $Env:Configuration

    - name: Pack
      run: dotnet pack $Env:SolutionFile --no-restore --no-build --configuration $Env:Configuration /p:Version=$Env:NuGetPackageVersion
