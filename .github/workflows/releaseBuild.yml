name: Release

on: 
  push:
    branches:
      - 'release-*'

jobs:
  build:
    env:
      Configuration: Release
      NuGetRepository: http://nexus.genexus.com/repository/nuget-hosted/

    runs-on: [self-hosted, windows]

    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: Clean previous build #Because self-hosted runners are not cleaned automatically
      run: |
        Get-ChildItem .\dotnet\src\*\bin -Recurse -ErrorAction SilentlyContinue |
          ForEach-Object {
           rm -Recurse $_.FullName
          }
        Get-ChildItem .\dotnet\src\*\obj -Recurse -ErrorAction SilentlyContinue |
          ForEach-Object {
           rm -Recurse $_.FullName
          }
     
    - name: Restore packages
      run: |

        dotnet restore dotnet\DotNetStandardClasses.sln
    - name: Build
      run: |
        $CommitNumber = git rev-list --no-merges --count HEAD

        dotnet build dotnet\DotNetStandardClasses.sln --no-restore --configuration $Env:Configuration /p:CommitNumber=$CommitNumber
        echo "::set-env name=CommitNumber::$CommitNumber"
        
    - name: Test
      run: |

        dotnet test dotnet\DotNetStandardClasses.sln --no-restore --no-build --configuration $Env:Configuration /p:CommitNumber=$Env:CommitNumber

    - name: Pack
      run: |

        # Get the FileVersion from the Build.props file
        $GetFileVersionOutput = dotnet msbuild dotnet/Directory.Build.props /t:GetFileVersionForPackage /p:CommitNumber=$Env:CommitNumber
        "$GetFileVersionOutput" -match "(?<=FileVersion:)(.*)"
        $GetFileVersionOutput = $Matches[0]

        $NuGetPackageVersion = $GetFileVersionOutput
        echo "::set-env name=NuGetPackageVersion::$NuGetPackageVersion"

        dotnet pack dotnet\DotNetStandardClasses.sln --no-restore --no-build --configuration $Env:Configuration /p:Version=$NuGetPackageVersion

    - name: Publish packages
      run: |      
        Get-ChildItem .\dotnet\*.nupkg -Recurse |
          ForEach-Object {
            dotnet nuget push $_.FullName --source $Env:NuGetRepository
            dotnet nuget push $_.FullName --source GPR
          }

    - name: Dispatch build result
      run: |
        $token = "${{ secrets.PAT }}"
        $uri = "${{ secrets.DISPATCH_URL }}"
        $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f "", $token)))
                  
        $headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
        $headers.Add("Authorization", ("Basic {0}" -f $base64AuthInfo))
        $headers.Add("Content-Type", "application/json")
        if ($Env:GITHUB_REF -match "[^\/]+$") {
            $branch = $Matches[0]

            $repositoryName = (split-path -leaf "$Env:GITHUB_REPOSITORY").Split(":")[0]

            $body = "{
                `"event_type`": `"component-deployed`",
                `"client_payload`": {
                    `"component`": `"$repositoryName`",
                    `"git_branch`": `"$branch`",
                    `"new_version`": `"$Env:NuGetPackageVersion`"
                }
            }"

            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12;
            $response = Invoke-RestMethod -Uri $uri -Headers $headers -Body $body -Method POST
            $response | ConvertTo-Json
        } else {
            Write-Error "Unable to get branch information for dispatch"
        }
